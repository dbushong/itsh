// Generated by CoffeeScript 1.10.0
var FINALE, PRELUDE, basename, fs, sendFile, stream;

fs = require('fs');

basename = require('path').basename;

stream = require('stream');

PRELUDE = new Buffer('\x1b]1337;File=');

FINALE = new Buffer('\x07');

sendFile = function(content, arg) {
  var attrs, encoder, height, inline, isBuffer, k, name, prefix, preserveAspectRatio, size, v, width;
  name = arg.name, width = arg.width, height = arg.height, inline = arg.inline, preserveAspectRatio = arg.preserveAspectRatio, size = arg.size;
  if (content instanceof Buffer) {
    isBuffer = true;
    if (size == null) {
      size = content.length;
    }
    if (size !== content.length) {
      throw new Error("opts.size (" + size + ") != buffer.length (" + content.length + ")");
    }
  } else if ('string' === typeof content) {
    if (!inline) {
      if (name == null) {
        name = basename(content);
      }
      if (size == null) {
        size = fs.statSync(content).size;
      }
    }
    content = fs.createReadStream(content);
  } else if (!(content instanceof stream.Readable)) {
    throw new Error('file must be a String, Buffer, or Stream');
  }
  attrs = {};
  if (name != null) {
    attrs.name = (new Buffer(name)).toString('base64');
  }
  if (width != null) {
    attrs.width = width;
  }
  if (height != null) {
    attrs.height = height;
  }
  if (size != null) {
    attrs.size = size;
  }
  if (inline) {
    attrs.inline = 1;
  }
  if (preserveAspectRatio === false) {
    attrs.preserveAspectRatio = 0;
  }
  prefix = Buffer.concat([
    PRELUDE, new Buffer(((function() {
      var results;
      results = [];
      for (k in attrs) {
        v = attrs[k];
        results.push(k + "=" + v);
      }
      return results;
    })()).join(';') + ':')
  ]);
  if (isBuffer) {
    return Buffer.concat([prefix, content.toString('base64'), FINALE]);
  } else {
    encoder = new stream.Transform({
      flush: function(cb) {
        if (this.extra != null) {
          this.push(new Buffer(this.extra.toString('base64')));
        }
        this.push(FINALE);
        return cb();
      },
      transform: function(buf, enc, cb) {
        var rem;
        if (this.extra) {
          buf = Buffer.concat([this.extra, buf]);
          this.extra = null;
        }
        if ((rem = buf.length % 3)) {
          this.extra = buf.slice(buf.length - rem);
          buf = buf.slice(0, buf.length - rem);
        }
        this.push(new Buffer(prefix + buf.toString('base64')));
        prefix = '';
        return cb();
      }
    });
    return content.pipe(encoder);
  }
};

module.exports = {
  sendFile: sendFile
};
