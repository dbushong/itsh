// Generated by CoffeeScript 1.10.0
var die, itsh, prog, sendMultiple,
  slice = [].slice;

itsh = require('../');

die = function() {
  var msg;
  msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  console.error.apply(console, [prog._name + ":"].concat(slice.call(msg)));
  return process.exit(1);
};

sendMultiple = function(paths, opts) {
  var res;
  res = itsh.sendFile(paths[0], opts);
  if (paths.length > 1) {
    res.on('end', function() {
      return sendMultiple(paths.slice(1), opts);
    });
    return res.pipe(process.stdout, {
      end: false
    });
  } else {
    return res.pipe(process.stdout);
  }
};

prog = require('commander');

prog.version(require('../package.json').version);

prog.command('send [file...]').description('send file or stdin to iTerm').option('-f, --fname <name>', 'Provide name for stdin').option('-s, --size <bytes>', 'Specify final size for stdin').action(function(paths, cmdOpts) {
  var ck, k, opts, ref;
  opts = {};
  ref = {
    fname: 'name',
    size: 'size'
  };
  for (ck in ref) {
    k = ref[ck];
    opts[k] = cmdOpts[ck];
  }
  if (paths.length) {
    if (opts.size != null) {
      die("don't supply --size for !stdin");
    }
    if ((opts.name != null) && paths.length > 1) {
      die("can't supply --fname for multiple files");
    }
  } else {
    if (opts.name == null) {
      opts.name = 'stdin.txt';
    }
    paths = [process.stdin];
  }
  return sendMultiple(paths, opts);
});

prog.command('img [file...]').description('display img file(s) or stdin in iTerm').option('-w, --width <w>', 'N cells, Npx, N%, or auto').option('-h, --height <h>', 'N cells, Npx, N%, or auto').option('-P, --no-preserve-aspect-ratio', 'allows stretching').action(function(paths, cmdOpts) {
  var i, k, len, opts, ref;
  opts = {};
  ref = ['width', 'height', 'preserveAspectRatio'];
  for (i = 0, len = ref.length; i < len; i++) {
    k = ref[i];
    opts[k] = cmdOpts[k];
  }
  opts.inline = true;
  if (paths[0] == null) {
    paths[0] = process.stdin;
  }
  return sendMultiple(paths, opts);
});

prog.parse(process.argv);
